N <- nrow(cr)
labels <- cr$GANG_RELATED
cr$GANG_RELATED <- NULL
N <- nrow(data) # total number of records (150)
train.index <- sample(1:N, train.pct * N) # random sample of records (training set)
train.data <- cr[train.index, ] # perform train/test split
test.data <- cr[-train.index, ] # note use of neg index...different than Python!
train.labels <- as.factor(as.matrix(labels)[train.index, ]) # extract training set labels
N
N <- nrow(cr)
N
train.index <- sample(1:N, train.pct * N) # random sample of records (training set)
train.data <- cr[train.index, ] # perform train/test split
test.data <- cr[-train.index, ] # note use of neg index...different than Python!
train.labels <- as.factor(as.matrix(labels)[train.index, ]) # extract training set labels
test.labels <- as.factor(as.matrix(labels)[-train.index, ])
k<-10
knn.fit <- knn(train = train.data, # training set
test = test.data, cl = train.labels, k = k
# test set
# true labels
# number of NN to poll
)
k<-10
knn.fit <- knn(train = train.data, # training set
test = test.data, cl = train.labels, k = k
# test set
# true labels
# number of NN to poll
)
ls
ls()
test.data <- range01(cr[-train.index, ]) # note use of neg index...different than Python!
str(cr)
str(train.data)
train.data <- data.frame(train.data$X_COORDINATE, train.data$Y_COORDINATE)
test.data <- data.frame(test.data$X_COORDINATE, test.data$Y_COORDINATE)
k<-10
knn.fit <- knn(train = train.data, # training set
test = test.data, cl = train.labels, k = k
# test set
# true labels
# number of NN to poll
)
k<-11
k<-13
knn.fit <- knn(train = train.data, # training set
test = test.data, cl = train.labels, k = k
)
?knn
k<-13
knn.fit <- knn(train = train.data, # training set
test = test.data, cl = train.labels, l=1, k = k
)
k<-13
knn.fit <- knn(train = train.data, # training set
test = test.data, cl = train.labels, l=5, k = k
)
hist
?hist
hist(train.data$X_COORDINATE)
str(train.data$X_COORDINATE)
str(train.data)
hist(train.data$train.data.X_COORDINATE)
test.data <- data.frame(range01(test.data$X_COORDINATE), range01(test.data$Y_COORDINATE)
)
batting <- read.csv("~/Documents/Data Science/oct_2-regularization/data/Batting.csv")
View(batting)
master <- read.csv("~/Documents/Data Science/oct_2-regularization/data/Master.csv", header=F)
View(master)
Salaries <- read.csv("~/Documents/Data Science/oct_2-regularization/data/Salaries.csv")
View(Salaries)
salaries <- Salaries
Salaries <- NULL
?merge
colnames(batting)
colnames(salary)
colnames(salaries)
colnames(master)
master <- read.csv("~/Documents/Data Science/oct_2-regularization/data/Master.csv")
View(master)
View(salaries)
batting_salary <- merge(batting, salary)
batting_salary <- merge(batting, salaries)
View(batting_salary)
data <- merge(master, batting_salary)
model_data <- data[,c('HR', 'RBI', 'R', 'G', 'height', 'weight', 'salary', 'yearID')]
model_data <- na.omit(model_data)
View(model_data)
columns_i_wanted <- c('HR', 'RBI', 'R', 'G', 'height', 'weight', 'salary', 'yearID')
str(columns_i_wanted)
as.factor(columns_i_wanted)
str(as.factor(columns_i_wanted))
?na.omit
train <- model_data[model_data$yearID == 2011,]
test <- model_data[model_data$yearID == 2012,]
mae <- function(x,y) { sum ( abs(x-y))/length(x)}
mse <- function(x,y) { sum ( (x-y)^2) / length(x)}
str(train)
str(test)
plot(train,test)
model1 <- lm(salary ~ HR + RBI + weight + height, data=train)
model2 <- lm(salary ~ HR + RBI + weight + height + R, data=train)
test.predict1 <- predict(model1, test)
test.predict2 <- predict(model2, test)
mae(test.predict1, test$salary)
mse(test.predict1, test$salary)
mae(test.predict2, test$salary)
mse(test.predict2, test$salary)
# I CAN'T BELIEVE THAT'S ALL IT TAKES TO BUILD A FUCKING MODEL
# lm(salary ~ HR + RBI + weight + height, data=train)
# FOR REAL?!
library(caret)
?train
train(data[,-c(salary)], data[,c(salary)], method='knn', trControl = trainControl(method = "cv"))
columns(data)
View(data)
train(data[,-c("salary")], data[,c("salary")], method='knn', trControl = trainControl(method = "cv"))
train(data[,-salary], data[,c("salary")], method='knn', trControl = trainControl(method = "cv"))
train(data[,-"salary"], data[,c("salary")], method='knn', trControl = trainControl(method = "cv"))
View(model_data)
View(model_data)
model_data[,-c("salary")]
train(subset(model_data, select=-c("salary")), subset(model_data, select=c("salary")))
train(subset(model_data, select=-c(salary)), subset(model_data, select-c(salary)))
train(subset(model_data, select=-c(salary)), subset(model_data, selec=-c(salary)))
mean(model_data$salary)
train(subset(model_data, select=-c(salary)), subset(model_data, selec=-c(salary)), method="knn", trControl = trainControl(method = "cv"))
subset(model_data, select=-c(salary))
subset(model_data, selec=-c(salary))
subset(model_data, select=-c(salary))
subset(model_data, select=c(salary))
train(subset(model_data, select=c(salary)), subset(model_data, select=-c(salary)), method="knn", trControl = trainControl(method = "cv"))
train(subset(model_data, select=-c(salary)), subset(model_data, select=c(salary)), method="knn", trControl = trainControl(method = "cv"))
library(mlbench)
lmFit <- train(salary ~ HR + RBI + weight + height, data=model_data, "lm")
str(lmFit)
summarize(lmfit)
summarize(lmFit)
test.predict3 <- predict(lmFit, test)
head(test.predict3)
head(test.predict1)
head(test.predict2)
head(test.predict3)
mse(test.predict3, test$salary)
sumary(lmFit)
summary(lmFit)
summary(model1)
summary(model2)
summary(lmFit)
install.packages(glmnet)
install.packages('glmnet')
mse(test.predict3, test$salary)
mae(test.predict3, test$salary)
mae(test.predict1, test$salary)
mae(test.predict2, test$salary)
summarize(test.predict1)
str(test.predict1)
head(test.predict1)
summary(test.predict1)
summary(model_data$salary)
?tapply
lscube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 4
x <- 8
if(x > 5) {
x <- 0
}
x = c(8)
if(x > 5) {
x <- 0
}
x = c(8,2)
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
?iris
str(iris)
mean(iris$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
pply(mtcars, 2, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?sapply
View(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
?subset
mean(subset(mtcars, cyl == 4)$hp)
mean(subset(mtcars, cyl == 4)$hp)-mean(subset(mtcars, cyl == 8)$hp)
abs(mean(subset(mtcars, cyl == 4)$hp)-mean(subset(mtcars, cyl == 8)$hp))
?sapply
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
str(f(3))
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls()
n
n
n
q
q
e
x
x
?
?
;
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
?iris
View(iris)
mean(subset(iris, species="virginica")$Sepal.Length)
mean(iris$Sepal.Length)
subset(iris, species="viriginca")
d<-subset(iris, species="viriginca")
mean(d)
d
mean(d$Sepal.Length)
?subset
d<-subset(iris, species=viriginca)
d
d<-subset(iris, select="species=viriginca")
d<-subset(iris, Species=viriginca)
s
d
d<-subset(iris, Species="virginica")
d
d <- iris[Sepal.Length="virginica"]
d<-subset(iris, Species=="virginica")
d
mean(subset(iris, Species=="virginica")$Sepal.Length)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
View(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
# admit is whether a student was let in.  Rank indicates how good a school they came from
# xtabs lets us see the data and clearly there is a pattern
xtabs(~admit + rank, data=x)
library("SPARQL")
library(SPARQL)
library(igraph)
library(network)
library(ergm)
endpoint <- "http://live.dbpedia.org/sparql"
options <- NULL
prefix <- c("db","http://dbpedia.org/resource/")
sparql_prefix <- "PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
"
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:American_films> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
res <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
View(res)
q <- paste(sparql_prefix,
'SELECT ?actor ?movie ?director ?movie_date
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:Films_based_on_novels> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:released ?movie_date .
FILTER(DATATYPE(?movie_date) = xsd:date)
?m dbp:starring ?a .
?a rdfs:label ?actor .
FILTER(LANG(?actor) = "en")
?m dbp:director ?d .
?d rdfs:label ?director .
FILTER(LANG(?director) = "en")
}')
movie.results <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
q <- paste(sparql_prefix,
'SELECT ?movie ?budget ?gross ?runtime
WHERE {
?m dc:subject <http://dbpedia.org/resource/Category:Films_based_on_novels> .
?m rdfs:label ?movie .
FILTER(LANG(?movie) = "en")
?m dbp:budget ?budget .
FILTER(DATATYPE(?budget) = <http://dbpedia.org/datatype/usDollar>)
?m dbp:gross ?gross .
FILTER(DATATYPE(?gross) = <http://dbpedia.org/datatype/usDollar>)
?m dbp:runtime ?runtime .
FILTER(DATATYPE(?runtime) = <http://dbpedia.org/datatype/second>)
}')
movie.results <- SPARQL(endpoint,q,ns=prefix,extra=options)$results
View(movie.results)
grossdata<-strsplit(movie.results$gross, '"')
grossnumeric<-unlist(grossdata)[2+(3*(0:length(movie.results$gross)))]
grossnumeric<-grossnumeric[-1736]
movie.results$grossnumeric<-as.numeric(grossnumeric)
movie.results$grossnumeric<-as.numeric(grossnumeric)
budgetdata<-strsplit(movie.results$budget,'"')
budgetnumeric<-unlist(budgetdata)[2+(3*(0:length(movie.results$budget)))]
budgetnumeric<-budgetnumeric[-1736]
movie.results$budgetnumeric<-as.numeric(budgetnumeric)
runtimedata<-strsplit(movie.results$runtime,'"')
runtimenumeric<-unlist(runtimedata)[2+(3*(0:length(movie.results$runtime)))]
runtimenumeric<-runtimenumeric[-1736]
movie.results$runtimenumeric<-as.numeric(runtimenumeric)
plot(movie.results$grossnumeric, movie.results$budgetnumeric)
which.max(movie.results$grossnumeric)
movie.results[1688,]
movie.results.clean<-movie.results[,-1688]
cor(movie.results.clean$grossnumeric, movie.results.clean$budgetnumeric)
which.max(movie.results$grossnumeric)
movie.results.clean<-movie.results[,-1688]
movie.results.clean<-movie.results[,-1688]
movie.results.clean<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
which.max(movie.results.clean$grossnumeric)
movie.results<-movie.results[,-1688]
which.max(movie.results.clean$grossnumeric)
which.max(movie.results$grossnumeric)
movie.results<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
movie.results<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
movie.results<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
movie.results<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
movie.results[1688,]
str(movie.results)
movie.results<-movie.results[,-1688]
movie.results<-movie.results[-1688,]
which.max(movie.results$grossnumeric)
str(movie.results)
which.max(movie.results$grossnumeric)
cor(movie.results.clean$grossnumeric, movie.results.clean$budgetnumeric)
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
movie.results<-movie.results[,-1688]
for (i in 1:100) { movie.results<-movie.results[,-1688] }
movie.results<-movie.results[,-1688]
which.max(movie.results$grossnumeric)
movie.results[1688]
movie.results[1688,]
movie.results<-movie.results[-1688,]
movie.results[1688,]
which.max(movie.results$grossnumeric)
cor(movie.results.clean$grossnumeric, movie.results.clean$budgetnumeric)
cor(movie.results$grossnumeric, movie.results.clean$budgetnumeric)
plot(movie.results$grossnumeric, movie.results$budgetnumeric)
View(movie.results)
head(movie.results)
head(movie.results)
?abline
plot(movie.results$grossnumeric, movie.results$budgetnumeric)
?hclust
?dist
x <- matrix(rnorm(100), nrow = 5)
dist(x)
dist(x, diag=TRUE)
dist(x, upper=TRUE)
variableized <- read.csv("~/play/ed_reform_funding_ca/data/variableized.csv")
View(variableized)
?kmeans
cluster <- kmeans(variableized)
cluster <- kmeans(variableized, 4)
variableized <- read.csv("~/play/ed_reform_funding_ca/data/variableized.csv")
View(variableized)
cluster <- kmeans(variableized, 4)
cluster <- kmeans(variableized[,1:7], 4)
cluster <- kmeans(variableized[,2:7], 4)
plot(cluster)
cluster
kmeans(variableized[,2:7], 5)
kmeans(variableized[,2:7], 6)
kmeans(variableized[,2:7], 5)
kmeans(variableized[,2:7], 3)
kmeans(variableized[,2:7], 2)
kmeans(variableized[,2:7], 1)
kmeans(variableized[,2:7], 2)
kmeans(variableized[,2:7], 3)
kmeans(variableized[,2:7], 4)
kmeans(variableized[,2:7], 5)
kmeans(variableized[,2:7], 5)
result1 <- kmeans(variableized[,2:7], 5)
variableized$cluster1 <- as.factor(result1$cluster)
plot(variableized)
dist.variableized <- dist(variableized[,2:7])
variableized.link<-hclust(dist.variableized, method='single')
plclust(variableized.link)
?hclust
variableized.link<-hclust(dist.variableized, method='ward')
plclust(variableized.link)
?hclust
?hclust
variableized.link<-hclust(dist.variableized, method='ward', labels=variableized$grant_maker)
plclust(variableized.link, labels=variableized$grant_maker)
?plclust
plclust(variableized.link)
?legend
legend (x="topright", legend=variableized$grant_maker)
plclust(variableized.link)
mean_funding <- read.csv("~/play/ed_reform_funding_ca/data/mean_funding.csv")
View(mean_funding)
dist.means <- dist(mean_funding[,2:7])
means.link<-hclust(dist.means, method='ward')
plclust(means.link)
mean_funding <- read.csv("~/play/ed_reform_funding_ca/data/mean_funding.csv")
View(mean_funding)
dist.means <- dist(mean_funding[,2:7])
dist.means <- dist(mean_funding[,1:7])
dist.means <- dist(mean_funding[,1:6])
dist.means <- dist(mean_funding[,2:6])
means.link<-hclust(dist.means, method='ward')
plclust(means.link)
variableized <- read.csv("~/play/ed_reform_funding_ca/data/variableized.csv")
View(variableized)
setwd('/Users/earino/play/ed_reform_funding_ca')
dist.variableized <- dist(variableized[,2:6])
variableized.link<-hclust(dist.variableized, method='ward')
plclust(variableized.link)
